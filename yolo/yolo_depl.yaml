apiVersion: v1
kind: Namespace
metadata:
  labels:
    pod-security.kubernetes.io/warn: privileged
    pod-security.kubernetes.io/warn-version: latest
  name: workload
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: yolo-consumer
  namespace: workload
spec:
  selector:
    matchLabels:
      run: yolo-consumer
  template:
    metadata:
      labels:
        run: yolo-consumer
    spec:
      containers:
      - name: yolo-consumer
        image: wickstjo/workload_consumer:latest
        imagePullPolicy: Always
        ports:
          - containerPort: 80
        env:
          - name: VALIDATE_RESULTS
            value: "FALSE"
          - name: YOLO_MODEL
            value: "custom-20k"
            # value: "custom-120k"
            # value: "custom-300k"
            # value: "custom-750k"
            # value: "yolov5n"
            # value: "yolov5m"
            # value: "yolov5s"

        # THORTTLE CONTAINERS OR NAH?
        # FEW LARGER PROCESSES, OR MANY SMALL ONES?
        # TECHNICALLY, THE END RESULT SHOULD BE THE SAME WITH KAFKA ROUTING
        resources:
          limits:
            cpu: 1000m
          requests:
          
            # SHOULD BE SMALLER THAN LIMIT?
            cpu: 1000m
---
apiVersion: v1
kind: Service
metadata:
  name: yolo-consumer
  namespace: workload
  labels:
    run: yolo-consumer
spec:
  ports:
  - port: 80
  selector:
    run: yolo-consumer
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: yolo-consumer
  namespace: workload
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: yolo-consumer

  # DETERMINE MAX REPLICAS BASED ON THOTTLED RESOURCES
  # 1 CORE PER POD, 20 PODS TOTAL = MAX 20 REPLICAS
  minReplicas: 1
  maxReplicas: 34
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization

        # HIGH PERCENTAGE = SCALE SLOWER
        # LOW PERCENTAGE = SCALE FASTER
        averageUtilization: 80

  # DEPENDENT ON METRICS SERVER INTERVAL (>=10s)
  # ADD 10-20% BUFFER TO MAKE SURE METRICS SERVER IS FRESH?
  behavior:

    # MINIMUM 10 SECONDS, BUT SHOULD PROBABLY BE 60+ SECONDS FOR STABILITY
    # STRATEGY: SCALE UP FAST WHEN NECESSARY, BUT SCALE DOWN SLOWLY FOR STABILITY?
    scaleDown:
      stabilizationWindowSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 10